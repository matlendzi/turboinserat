# listing.py
from fastapi import APIRouter, HTTPException, Query
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel
from bson import ObjectId
from bson.json_util import dumps
from decouple import config
from database import ad_collection
from openai import OpenAI
import json

router = APIRouter()
client = OpenAI(api_key=config("OPENAI_API_KEY"))

# Hilfsfunktion f√ºr die Preisformatierung
def format_price(price: str | float | None) -> str:
    if price is None:
        return "Preis auf Anfrage"
    try:
        num_price = float(price) if isinstance(price, str) else price
        return f"{num_price:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") + " ‚Ç¨"
    except (ValueError, TypeError):
        return str(price)

class ListingRequest(BaseModel):
    ad_process_id: str

@router.post("/generate")
async def generate_listing(req: ListingRequest):
    ad_id = ObjectId(req.ad_process_id)
    ad = await ad_collection.find_one({"_id": ad_id})
    if not ad:
        raise HTTPException(status_code=404, detail="AdProcess nicht gefunden")

    features = ad.get("identification", {}).get("data", {})
    suggestion = ad.get("price_data", {}).get("suggestion", {})
    price = suggestion.get("suggested_price")

    if not features:
        raise HTTPException(status_code=400, detail="Produktmerkmale fehlen")

    preistext = format_price(price) if price is not None else "Preis auf Anfrage"

    prompt = {
        "role": "system",
        "content": """
        Du bist ein Experte f√ºr Kleinanzeigen-Texte. Deine Aufgabe:

        Erstelle aus den folgenden Produktdaten eine Anzeige mit:

        - **title** (max. 60 Zeichen):  
        Verwende klare Schlagw√∂rter wie Produktname, Marke, Zustand und ggf. relevante Eigenschaften (sofern in den Daten enthalten).  
        Verwende keine erfundenen Begriffe. Nutze nur die bereitgestellten Informationen.

        - **description** (max. 500 Zeichen):  
        Gib m√∂glichst viele relevante Informationen wieder: Ma√üe, Gewicht, Kaufdatum, Zustand, Zubeh√∂r, Besonderheiten ‚Äì aber **nur**, wenn sie in den Daten vorkommen.  
        Keine Halluzinationen oder Erg√§nzungen. Verwende ausschlie√ülich die gelieferten Daten.  
        Du darfst freundliche Formulierungen und strukturierte S√§tze nutzen, solange sie inhaltlich korrekt bleiben.  
        Wenn m√∂glich, formuliere ehrlich und transparent, ohne Dinge hinzuzuf√ºgen, die nicht erw√§hnt wurden (z.‚ÄØB. keine Versandinfos erfinden).

        - **condition**:  
        Wird direkt aus dem √ºbergebenen Zustand √ºbernommen.

        - **category**:  
        Wird direkt √ºbernommen.

        - **price**:  
        Wenn Preis vorhanden, gib ihn als Zahl aus.  
        Wenn kein Preis √ºbergeben wird, schreibe \"Preis auf Anfrage\".

        Gib die Antwort **ausschlie√ülich** im folgenden JSON-Format aus:

        {
        \"title\": \"...\",
        \"description\": \"...\",
        \"condition\": \"...\",
        \"category\": \"...\",
        \"price\": \"...\" // Preis auf Anfrage oder formatierter Preis
        }

        ‚ö†Ô∏è Wichtig: Antworte **nur basierend auf den √ºbergebenen Daten**.  
        Erfinde keine zus√§tzlichen Eigenschaften, Zubeh√∂rteile oder Nutzungsangaben.
        """
    }

    user_input = {
        "role": "user",
        "content": f"Produktdaten: {json.dumps(features)}\nPreis: {preistext}"
    }

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[prompt, user_input],
            temperature=1,
            max_tokens=2048
        )

        raw = response.choices[0].message.content.strip()
        print("üîé GPT-Rohantwort:", raw)

        if raw.startswith("```json"):
            raw = raw.removeprefix("```json").removesuffix("```").strip()
        elif raw.startswith("```"):
            raw = raw.removeprefix("```").removesuffix("```").strip()

        try:
            parsed = json.loads(raw)
        except json.JSONDecodeError:
            raise HTTPException(status_code=500, detail=f"Antwort kein g√ºltiges JSON: {raw}")
        
          # Fallbacks setzen, wenn GPT Mist baut
        parsed.setdefault("title", "Titel fehlt")
        parsed.setdefault("description", "Keine Beschreibung generiert")
        parsed.setdefault("condition", features.get("condition", "Unbekannt"))
        parsed.setdefault("category", features.get("category", "Unbekannt"))
        parsed.setdefault("price", price if price is not None else "Preis auf Anfrage")

        # Rechtliche Hinweise immer anh√§ngen
        disclaimer = ("Der Verkauf erfolgt unter Ausschluss jeglicher Sachm√§ngelhaftung. "
                      "Die Haftung auf Schadenersatz wegen Verletzungen von Gesundheit, K√∂rper oder Leben "
                      "und grob fahrl√§ssiger und/oder vors√§tzlicher Verletzungen meiner Pflichten als Verk√§ufer bleibt davon unber√ºhrt.")
        parsed["description"] = f"{parsed['description'].rstrip()}\n\n{disclaimer}"

        await ad_collection.update_one(
            {"_id": ad_id},
            {"$set": {
                "listing": parsed,
                "wizard_state": "LISTING_READY"
            }}
        )

        return {"status": "listing generated", "title": parsed.get("title")}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"OpenAI-Fehler: {str(e)}")


@router.get("/ad-process/{ad_process_id}")
async def get_process_details(ad_process_id: str):
    ad_id = ObjectId(ad_process_id)
    ad = await ad_collection.find_one({"_id": ad_id}, {
        "wizard_state": 1,
        "identification.data": 1,
        "price_data.suggestion": 1,
        "listing": 1
    })
    if not ad:
        raise HTTPException(status_code=404, detail="AdProcess nicht gefunden")

    return json.loads(dumps(ad))


@router.get("/ad-processes")
async def list_ad_processes(user_id: str = Query(...)):
    results = await ad_collection.find({"user_id": user_id}).to_list(length=100)
    return json.loads(dumps(results))
